
okay so for dynamic linking while still being extensible and fast,
we need mobile libraries

alternative title:

for dyn
* boopy feedback
** backwards-compatible
  okay it's all misleading,
  because I'm proposing this *as* a way to have a backwards-compatible protocol
  (boopy says)
  he doesn't like the first sentence

  so I should really not say "hey there's no backwards-compatibility lol",
  i should instead say this is a different way to to do it.
  seems reasonable!
** interface definitions
  ALSO,
  the point about, the client has interface definitions,
  was not loud enough because boopy missed that
* so, rework...
  so... what am I really saying?
  i'm saying, maybe,
  that backwards-compat is better done at the edges,
  rather than transmitted over the wire...

  yeah, that's... good and interesting

  Basically:

  Instead of speaking a backwards-compatible but slow wire protocol,
  a service can speak a fast, but not-backwards-compatible wire protocol
  and provide a library with an efficient backwards-compatible interface to that wire protocol.
  Clients can use this library to speak the wire protocol;
  when the wire protocol changes,
  clients can automatically download and use the new library version at runtime.
* boopy feedback 2  
  first paragraph is long
  you need the title to understand it, which is weird

  second paragraph is too abstract,
  sounds like you are going to do some cap theorem thing,
  just delete it lol
* rework 2  
  OK I think I can make the first paragraph much shorter and more vague.

  What's the core idea here?

  It is easier to deploy changes to backwards-compatible wire protocols
  than to wire protocols that are not backwards compatible.
  (But I'm suggesting that's not true!)

  A backwards-compatibility layer makes it easier to deploy upgrades to protocols;
  when this is at the wire protocol layer, it also makes the protocol less efficient.
  If backwards-compatibility is shifted to the client library layer,
  it can be removed from the wire protocol which can then be made more efficient.


  At the wire protocol level,
  which describes the serialization and deserialization of bits over some transport,
  supporting old client code while the wire protocol changes
  comes with a cost in performance.

  (maybe skip straight to "Protocols that are backwards-compatible and can be changed" section?)
