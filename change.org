* you can change the system
y'know?

you can change it.

you should not be afraid of changing things.

(and I said that was my unique thing that I add - diving deep and finding the root cause of an issue and fixing it there)

right so like.

you can change code

if you have A and B fluid and C fixed,
you can reinterpret that!
C can be fluid and A fixed!
they can be rearranged!

geofft's paraphrase:
"if you're having trouble making X fit into constraint Y, feel free to reshape X to solve your problem"

my original title "You know you can actually change your code?"
** my concrete example
it was, that the start scripts for the core trading system,
leave behind orphan processes instead of being good

and the launchpad project refused to just rewrite them to be good.
** title
Code can be changed, not just worked around
APIs can be changed, not just worked around

You can change the API, you don't just have to work around it


You can solve problems by changing code, not just writing new code

Changing code is a valid way to solve your problems

hmm but also, one of the key points is, like...
re-evaluating your design.
like with that tactic thing.
the easiest way was... well, I guess he'd have to write some code too,
specifically change the startup stuff so he can easily start it up.

so like...
you can change your design. it's possible!
well, what was the issue there?
I think it was a fixed notion of what's possible, not necessarily fear of changing the system...

ummm.
yeah.
like with geofft's paraphrase, normally someone would just violate constraint Y
** oh
refactoring
you can refactor things

or something like that.
it's not simply refactoring;
it's changing how one component behaves,
but that's an overall refactoring of internal stuff.

like if you have two components with internal interfaces two each other,
shifting how they interact is refactoring, I guess,
since it's not externally visible.

and you should be willing to do that!

and also, when it's an open source library;
you can still refactor them together!

like you can use that same practice of...
improving things at the root.
** the system is fluid
I like that "metaphor"
inasmuch as calling something fluid is a metaphor...

just that you can change things... anyway...
** similar issue
<adiabatic> oh, this isn't a complete solution. for pizza I stuff the whole box in (if I can)
> good point about "stuff the whole box in"
> I guess maybe my *real* issue is that I need a bigger refrigerator
> too bad that's impossible since I have a small apartment
> but wait!
> my *real* issue is that I need a bigger apartment

y'know? don't treat things as invariants.
optimizing where things are invariants, not good.

and discover when new things can vary!
I didn't even think of growing the refrigerator so I can stick pizza boxes in
e.g. I said "if it's other takeout it usually comes in something that can fit in my refrigerator"
but did not think of growing the refrigerator.

running an optimization where more things are free variables instead of fixed,
allows forb etter outcomes
** changing things
title: You can change the world
title: Have the courage to change things
** thought
okay so everyone is in favor of,
when management talks to engineers,
engineers should be able to push back and say "actually I don't think this is the right way to solve this problem".

so what about when engineers talk to engineers??
I mean, I think it is allowed, but just,
many engineers are reluctant to rethink their solution approach,
or to grow the scope or things like that.

(i guess that's why they aren't managers heh, if they aren't willing to listen to feedback)

so it's not just hierarchical organizations, but also equitable ones.

also:
it's not just:
"change X to fit constraint Y",
it's also,
"change constraint Y to fit X".

right like...

change the problem.

there are lots of things that seem like fixed constraints:
- Whatever is causing the problem
- The requests ("requirements") of the people who want a solution to the problem
- The scope and details of the problem itself
- The features of the tools you have available to solve the problem
- Things which are managed or controlled by other people
- Things you don't know how to change
- Things which you don't have experience in changing
- Things which, if changed, will cause other problems
- Fundamental, well-established things which rarely change
- Old things
** related link
see https://blog.pragmaticengineer.com/what-silicon-valley-gets-right-on-software-engineers/ 

firs ttwo sections
** xy problem is related?
Changing the problem: if you're tasked with coming up with a solution to a problem,
maybe you can get a better solution by removing the problem,
or by reinterpreting what's *really* needed to solve the problem,
and learning to make do with existing stuff.
just like... they come to you asking "we need to do Y",
but actually it's an X-Y problem. yes! X-Y problems!
this is the intent of someone who says that someone else has an XY problem:
they want the XY-problem-haver to talk about their "real" problem X.
what this usually means is that they want the XY-problem-haver to rethink what they're trying to do,
and give up whatever constraints are forcing them into doing Y.

or, yeah.
in my experience, many XY problems are caused by not exploring the solution space enough.
(of course, they can also be "caused" by over-exporing)

ok well not really.
I think XY problem is more just,
under-exploration even in the constrained space.

which is basically just under-exploration
** gwern's objection
http://grognor.blogspot.com/2016/12/have-you-tried-solving-problem.html

it's like "what if you solved the problem"

which lists a long list of obvious things to try.

which is charming and memorable.

whereas... I'm just saying "try changing thing".

> what do you think of my latest article #lesswrong https://catern.com/change.html
<gwern> 'have you tried solving the problem?'
> gwern: are you saying you think this is obvious advice? I'm not sure it's any more obvious than http://catern.com/reuse.html for example
<gwern> https://grognor.blogspot.com/2016/12/have-you-tried-solving-problem.html
> yeah I found that from google
> or are you saying that that article has the same point?
<gwern> I think it makes many of the same points in a much more entertaining and memorable way
<gwern> maybe not as useful
** OK!! Ok.
the real issue here is:

how do you pick the conventional solution search space?

I mean, this is not how I actually think, right?

well, it kind of is.
I consider what's possible with the obvious approaches,
using tools we have, etc.

and then I also consider more radical ideas.

but that's not what I'm trying to say here.
I'm trying to say:
change things, for god's sake!

Basically:

When you are thinking about how to solve a problem,
you should spend some of that time thinking about radical changes that might solve the problem,
rather than only thinking about conventional ideas.
If you don't think about radical changes,
you'll choose suboptimal solutions.
** okay again
so really I'm just saying:
consder unusual solutions.

um.

so is "diving deep into some stack to fix it" an unusual solution???
not for me!

maybe I should separate
"change what the problem is"
from
"make changes to other people's code"


mmmm yeah...
so the "get a bigger refrigerator" isn't *super* related...

it's just the idea that you can change your code for god's sake.
rewrite this thing to not be buggy instead of working around it,
or delete the logs instead of filtering them out.

both of those... I feel like a big issue is...
being afraid of changing code produced by others,
or code that you don't understand.

mmmmmmmmmmmm

I guess maybe I should focus on that.
instead of the vague "change things to resolve your problem" frame.

right and also:
rewriting this is not an unusual change.
deleting the logs is not an unusual change.

it's just that people don't do those because they're afraid of changing code,
because of all the issues:
it's not their code, they don't understand it, they don't know if it's right, etc


** also tangentially, yakshaving is good
hmmm

i mean it's related because the idea is:
you can fix the issue that you see.

i mean a correct yakshave is good;
one which is just based on piles of workarounds is not good.

so it goes back to, you can change the code.
** writing it out fast

title: Be willing to change anything to resolve your problem

When searching for a solution to a problem,
the practical approach is to view some things (including the problem itself) as fixed and unchangeable constraints,
and other things as "free variables" that you can set to whatever you want.
But you should make sure to also perform a basic meta-search process
where you consider: what if you did change those things that seem like fixed constraints?

There are lots of things that seem like fixed constraints:

- Whatever is causing the problem
- The requests ("requirements") of the people who want a solution to the problem
- The scope and details of the problem itself
- The features of the tools you have available to solve the problem
- Things which are managed or controlled by other people
- Things you don't know how to change
- Things which you don't have experience in changing
- Things which, if changed, will cause other problems
- Things which would be expensive to change, or take a long time to change
- Fundamental, well-established things which rarely change
- Old things

Sometimes the best solution will involve changing constraints which seem fixed,
and if you don't spend sufficient time thinking about that,
you'll systematically choose suboptimal solutions.
It might be that the best solution still doesn't involve changing any fixed-seeming constraint.
but it's still important to think about it!

Some examples:
- A friend was considering the best way to store leftover food,
  particularly pizza,
  because pizza boxes didn't fit in their small refrigerator.
  They considered putting it in various containers or wrapping it in foil,
  but until prompted,
  they didn't consider getting a bigger refrigerator,
  which turned out to be the best solution due to other reasons.
- An engineer was considering how to deal with some noisy not-useful log messages
  produced by another team's software.
  They considered various schemes to filter out those messages,
  but didn't consider simply deleting the log messages.
  It turned out that the other team was happy to delete the logs:
  they found them noisy and not-useful too.
- improving society? (changing human nature?? removing scarcity? transhumanism?)
  (building central cities vs remote work?)

When you see a problem,
part of your time should be spent on trying to solve that specific problem within the ordinary limited solution space,
and part of your time should be spent searching a broader space
for solutions which require larger changes,
but are overall better - cheaper, faster, easier to implement, easier to use, higher-quality, better long-term.

One shift in perspective is to remember that
you always are acting within that broader space,
and your goal in that broader space is not to solve a specific problem,
but to make a better world.
When you choose to do constrained search,
it's for reasons of practicality,
not because you are yourself constrained in this way.
Any ideas which suggest you are constrained in this way -
that searching the broad space is the responsibility of others,
or that it should only be done when socially appropriate at specific times
- are wrong.

Evaluating proposals in the broad search space can be difficult;
for example,
a proposal to radical rework everything can seem like a good idea when considered on its individual merits,
but radical reworks, when implemented, usually turn out to be bad solutions.
Make sure to incorporate heuristics like this
to improve your ability to evaluate solutions,
as well as other techniques
like consulting experts and writing out costs and benefits.
You can practice by making predictions, aggregating them with others,
and scoring yourself on your predictive accuracy.

Balancing the amount of time spent on constrained search and the amount of time spent on broad search
is an important skill.
This, too, can be improved by various techniques,
as well as explicit practice.
In my experience,
most people spent too little time on broad search.
Therefore, you should err on the side of broad search
until you have a better understanding of the balance.

* attempt 2, focusing on changing code
ok ok ok
** write it out
title: Did you know you can actually change your code?

I can't count how many times
I've heard programmers talking about writing more code to work around an issue in some other code.
You are a programmer - you are allowed to change code!
In fact, it's your job!
Just change the code to do what you want!
Fix the bug! Change the behavior! Add the feature!

- Log message that's noisy and useless?
  Delete the logging code!
- API that doesn't expose what you need?
  Add a new parameter!
- Library that does something horrible that all your software depends on?
  Stop doing the horrible thing and add a shim for compatibility!
- Open source software that's doing bad stuff?
  Patch it locally and send the patch upstream!

There are some basic technical excuses one might give for why you aren't able to change the code.
For example:

- But I'm not allowed to touch code owned by other teams!
- But I don't know how to change it!
- But I don't know where the source code is!
- But I can't build this software!
- But I can't run the tests!
- But I can't deploy a modified version of this software to production!

However, you shouldn't be using any software where any of these are an issue,
and you should quit your job if they provide such poor developer tooling that those are real issues.

There are some social/political excuses one might give for why you aren't able to change the code.
For example:

- But it means we have to talk to the team that owns this code!
  So what?
  They'll probably be happy that you're looking at their code and trying to improve it!
  If they aren't happy, they maybe what you're trying to do is evil anyway,
  and you should be thankful that they're stopping you!
  If what you're doing is good, but they're still not happy,
  then stop using their software!
- But changing things will impact other users!
  If what you are trying to do is good,
  then the impact on other users will be good,
  and you should embrace the costs and benefits of coordinating with them.
  If what you are trying to do is bad,
  then you should not do it.
- But we haven't budgeted time to do it the right way!
  Then you never will budget time to do it the right way.
  Do it the right way now or you will suffer forever.
- But this is supposed to be a quick experiment!
  You can perfectly well do a quick experiment by modifying the original code;
  indeed, it should be quicker to do it that way.

Fear not!
Just change the code!
** this is so boring and corporate though
maybe I should say things about...
upstreaming?
** papua feedback
<PapuaHardyNet> imo your article isn't enough to convince someone
emotionally to do so. intellectually I am convinced, but is this
getting me to open a new issue in optax about how their adam optimizer
(a function) doesn't work with jax's (google's nn library) pmap
(another function)? no
<PapuaHardyNet> also I don't really care
<PapuaHardyNet> on second thoughts, optax is also maintained by
google, and helping optax get better is good for the jax ecosystem as
a whole
<PapuaHardyNet> hmm. maybe I will schedule some time to do this
<gwern> 'the life you save may be your own'
<gwern> btw if you notice on paperswithcode that you are no longer
wasting a click on every paper page to read the abstract, that's
because I whined at them
> PapuaHardyNet: thank you for the feedback!
<PapuaHardyNet> gwern: that's one significant positive change to paperswithcode, yeah
** sm2n feedback
#+begin_quote
They'll probably be happy that you're looking at their code and trying to improve it!
If they aren't happy, they maybe what you're trying to do is evil anyway,
#+end_quote

<sm2n> catern: "If what you are trying to do is good, then the impact on other users will be good" |
I don't think this holds in general
<sm2n> sometimes you can be in an adversarial relationship with other users in terms of advancing your goals
<sm2n> what is good from your perspective may be bad from their perspective
<sm2n> for example:
<https://www.roguelazer.com/2020/07/etcd-or-why-modern-software-makes-me-sad/>

some people doubt this
e.g. https://www.roguelazer.com/2020/07/etcd-or-why-modern-software-makes-me-sad/

okay...
so yeah...
thinking about it from the perspective of...
"don't change my stuff! argh!"
basically like what if I'm a guy who doesn't want my stuff changed...

> sm2n: actually I don't think that article disproves my point - the
googlers should have been stopped from making their terrible changes
by the other users, because their terrible changes were terrible
> sm2n: what do you think of that rebuttal? it's in essence: you
should *hope* that people stop you from making bad changes, but
sometimes they won't. doesn't matter to you either way though

<sm2n> catern: I think the Googlers thought their changes were good, and maybe they were right /for them/
<sm2n> catern: I don't think there is a "software goodness" axis you can crank up or down
<sm2n> catern: At best, you can make better designed artifacts on some universal scales like "how
well is the software understood/tested/etc", possibly "length of code". But many (most!)  other
things involve tradeoffs, and the aforementioned Hyrum's law says that at scale there are users with
an investment in every tradeoff your software makes

hm well I kind of do actually think there's objectively good stuff.

okay but what do I really mean?

weellll
hmmm

so what if...
you want to change something...
or do something...

but the people who want to do it don't agree...
so... you...
have to hack around them? huh? or what?

okay I guess I should talk about that more.

Differences of opinion about what is good.

Forks?
Running different instances?

aha!

forking!
talk about forking.
related to exit vs voice.

I can link this to/from there.
(in addition to linking this to/from "reuse abstractions")

so yeah, forking.
I won't worry about talking about running different instances,
cuz that's something that would worry people, and everything should be a library anyway...

forking!
that's what you do when there are different opinions about what is good and what is bad.
and that should be easy!

like, yeah, that's what I think, right?
if you can't do the thing upstream, that's okay,
you should be able to do it in your fork without problems.

and that's kind of the technical thing, that that should be easy:
"But I can't deploy a modified version of this software!"

let's s/deploy/use/.

right so it should be easy for you to patch something and use a changed version.
i guess i do think that.

it doesn't really fit in with my.... daemon engine thoughts...
or capabilities...
or plan 9...

it's suspiciously Nix-and-Two-Sigma-y...

but still... I guess I do think it!
I mean it's also pro-library anti-service, too.
so that's good.

okaaaaaaaaaaaaaaaaaaaaaay
so
forking.

right...
it's a technical issue...
but it's only sometimes an issue.
because sometimes, you don't need to fork, it will go upstream just fine.
and also this is related to other users;
maybe you can upstream it,
but you have to upgrade early ahead of other users.
again, easy enough.

(and avoids talking about "running multiple instances")

yeah really it's:
use exit/voice/fork when the developer disagrees with you

and then what about users?
well, if it's upstream,
just upgrade earlier.

yeaahh yeah yeah.
hmm.

well okay.
suppose you're trying to do something good,
and upstream is cooperative,
but you're worried about the impact on other users.

well that's why we have versioning.

so we should just implicitly talk about that.

If what you are trying to do is good,
then the impact on other users will be good,
and they'll be happy to have the new features if and when they upgrade.
and they'll be happy to have the new features if and when they switch to your version.
If what you are trying to do is bad,
then...

then they don't have to use your new version.

then your version may never be promoted to the master version.

They don't have to use your new version.
(this will sound bonkers to anyone working on services hmmm)

They don't have to upgrade to the new behavior

If what you are trying to do is good for them,
they will be happy,
and you should embrace the costs and benefits of coordinating with them.
If what you are trying to do is bad for them,
then you probably shouldn't do it,
but if you do anyway,
it's fine, they don't have to use your changed version.

If what you are trying to do is bad for them,
then you probably shouldn't do it,
but if you do anyway,
you can surely figure out a way that they don't have to use your changed version.


be polite and don't push your changes to the version of the software they use.

you just don't have to push your changes to the version of the software they use.

** CalimeroTeknik feedback
<CalimeroTeknik> catern, I see an issue you might have missed: I don't know how to fix this
<CalimeroTeknik> perhaps the number one problem in the industry: I see a problem, and I don't have a solution,
though I have many resources to devote to implementing any hypothetical solution if I only had one
<CalimeroTeknik> maybe that's out of your scope

hm. well, that's kinda dumb frankly.

but, yes, it's an objection I should subtly avoid I guess

so. hm.
well okay so part of the issue is that I said,
"work around an issue",
not,
"write more code to work around an issue".

it's clearer that if i'm considering writing more code,
i might as well target that code at the original code, kinda thing.

but what if:
1. i don't know even how to write more code to solve this, or
2. i don't know how to make changes to the original thing to fix it

it sounds like 2 is covered actually by "I don't know how to change it"

yeah yeah. okay.

so the other issue 1 is:
what if I don't even know how to solve it in code of any kind,
but I do know how to work around it?
or, heck, do it manually??

this relates to questions about, why not automate something!
well, maybe I don't know how to automate something!

so basically I do think it's better to write code than do something manually/change policies,
but that's not what I'm saying here.

i'm saying,
changing the original code causing the issue,
is better than adding new code on top

> CalimeroTeknik: can you elaborate slightly? maybe just reword what you mean or how this might manifest
> i'm just trying to be sure i understand what you mean
<CalimeroTeknik> perhaps with an API, it's horrible to use but I can't think of a better one

aha yeah.
basically I'm talking about situations where you *do* know a solution,
you're just implementing the solution in some additional layer of code on top,
rather than changing the original code

you just aren't implementing it in the original code

<CalimeroTeknik> admittedly I almost always do the shim thing, especially in postgresql
<CalimeroTeknik> I'll die before the standard can be fixed
<CalimeroTeknik> (of old age, to be clear)

OOPs I definitely want to stop saying that.
yeah okay deleted
** corbin
<Corbin> catern: I read your article. The overall thrust is fine, but the only parts that survive scrutiny are either vacuous or fundamental.
<Corbin> That's not to say that it's bad to remind people of one of the fundamentals of software engineering! The fact that we can change software is what defines it in contrast to hardware.
> (as a side comment, this is also how you encode existentials in terms of universals.  which makes me uncertain that isekaijin's proposal of using existentials to allow f to escape will work)
> Corbin: interesting feedback, please elaborate if you would
<Corbin> catern: For example, there's a wide range of users that can be impacted by code changes. If the code change would cause a disaster or outage, then we have to definitionally consider whether those are social or technical.

