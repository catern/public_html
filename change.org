* you can change the system
y'know?

you can change it.

you should not be afraid of changing things.

(and I said that was my unique thing that I add - diving deep and finding the root cause of an issue and fixing it there)

right so like.

you can change code

if you have A and B fluid and C fixed,
you can reinterpret that!
C can be fluid and A fixed!
they can be rearranged!

geofft's paraphrase:
"if you're having trouble making X fit into constraint Y, feel free to reshape X to solve your problem"

my original title "You know you can actually change your code?"
** my concrete example
it was, that the start scripts for the core trading system,
leave behind orphan processes instead of being good

and the launchpad project refused to just rewrite them to be good.
** title
Code can be changed, not just worked around
APIs can be changed, not just worked around

You can change the API, you don't just have to work around it


You can solve problems by changing code, not just writing new code

Changing code is a valid way to solve your problems

hmm but also, one of the key points is, like...
re-evaluating your design.
like with that tactic thing.
the easiest way was... well, I guess he'd have to write some code too,
specifically change the startup stuff so he can easily start it up.

so like...
you can change your design. it's possible!
well, what was the issue there?
I think it was a fixed notion of what's possible, not necessarily fear of changing the system...

ummm.
yeah.
like with geofft's paraphrase, normally someone would just violate constraint Y
** oh
refactoring
you can refactor things

or something like that.
it's not simply refactoring;
it's changing how one component behaves,
but that's an overall refactoring of internal stuff.

like if you have two components with internal interfaces two each other,
shifting how they interact is refactoring, I guess,
since it's not externally visible.

and you should be willing to do that!

and also, when it's an open source library;
you can still refactor them together!

like you can use that same practice of...
improving things at the root.
** the system is fluid
I like that "metaphor"
inasmuch as calling something fluid is a metaphor...

just that you can change things... anyway...
** similar issue
<adiabatic> oh, this isn't a complete solution. for pizza I stuff the whole box in (if I can)
> good point about "stuff the whole box in"
> I guess maybe my *real* issue is that I need a bigger refrigerator
> too bad that's impossible since I have a small apartment
> but wait!
> my *real* issue is that I need a bigger apartment

y'know? don't treat things as invariants.
optimizing where things are invariants, not good.

and discover when new things can vary!
I didn't even think of growing the refrigerator so I can stick pizza boxes in
e.g. I said "if it's other takeout it usually comes in something that can fit in my refrigerator"
but did not think of growing the refrigerator.

running an optimization where more things are free variables instead of fixed,
allows forb etter outcomes
** changing things
title: You can change the world
title: Have the courage to change things
** thought
okay so everyone is in favor of,
when management talks to engineers,
engineers should be able to push back and say "actually I don't think this is the right way to solve this problem".

so what about when engineers talk to engineers??
I mean, I think it is allowed, but just,
many engineers are reluctant to rethink their solution approach,
or to grow the scope or things like that.

(i guess that's why they aren't managers heh, if they aren't willing to listen to feedback)

so it's not just hierarchical organizations, but also equitable ones.

also:
it's not just:
"change X to fit constraint Y",
it's also,
"change constraint Y to fit X".

right like...

change the problem.

there are lots of things that seem like fixed constraints:
- Whatever is causing the problem
- The requests ("requirements") of the people who want a solution to the problem
- The scope and details of the problem itself
- The features of the tools you have available to solve the problem
- Things which are managed or controlled by other people
- Things you don't know how to change
- Things which you don't have experience in changing
- Things which, if changed, will cause other problems
- Fundamental, well-established things which rarely change
- Old things
** related link
see https://blog.pragmaticengineer.com/what-silicon-valley-gets-right-on-software-engineers/ 

firs ttwo sections
** xy problem is related?
Changing the problem: if you're tasked with coming up with a solution to a problem,
maybe you can get a better solution by removing the problem,
or by reinterpreting what's *really* needed to solve the problem,
and learning to make do with existing stuff.
just like... they come to you asking "we need to do Y",
but actually it's an X-Y problem. yes! X-Y problems!
this is the intent of someone who says that someone else has an XY problem:
they want the XY-problem-haver to talk about their "real" problem X.
what this usually means is that they want the XY-problem-haver to rethink what they're trying to do,
and give up whatever constraints are forcing them into doing Y.

or, yeah.
in my experience, many XY problems are caused by not exploring the solution space enough.
(of course, they can also be "caused" by over-exporing)

ok well not really.
I think XY problem is more just,
under-exploration even in the constrained space.

which is basically just under-exploration
** gwern's objection
http://grognor.blogspot.com/2016/12/have-you-tried-solving-problem.html

it's like "what if you solved the problem"

which lists a long list of obvious things to try.

which is charming and memorable.

whereas... I'm just saying "try changing thing".

> what do you think of my latest article #lesswrong https://catern.com/change.html
<gwern> 'have you tried solving the problem?'
> gwern: are you saying you think this is obvious advice? I'm not sure it's any more obvious than http://catern.com/reuse.html for example
<gwern> https://grognor.blogspot.com/2016/12/have-you-tried-solving-problem.html
> yeah I found that from google
> or are you saying that that article has the same point?
<gwern> I think it makes many of the same points in a much more entertaining and memorable way
<gwern> maybe not as useful
** OK!! Ok.
the real issue here is:

how do you pick the conventional solution search space?

I mean, this is not how I actually think, right?

well, it kind of is.
I consider what's possible with the obvious approaches,
using tools we have, etc.

and then I also consider more radical ideas.

but that's not what I'm trying to say here.
I'm trying to say:
change things, for god's sake!

Basically:

When you are thinking about how to solve a problem,
you should spend some of that time thinking about radical changes that might solve the problem,
rather than only thinking about conventional ideas.
If you don't think about radical changes,
you'll choose suboptimal solutions.
** okay again
so really I'm just saying:
consder unusual solutions.

um.

so is "diving deep into some stack to fix it" an unusual solution???
not for me!

maybe I should separate
"change what the problem is"
from
"make changes to other people's code"


mmmm yeah...
so the "get a bigger refrigerator" isn't *super* related...

it's just the idea that you can change your code for god's sake.
rewrite this thing to not be buggy instead of working around it,
or delete the logs instead of filtering them out.

both of those... I feel like a big issue is...
being afraid of changing code produced by others,
or code that you don't understand.

mmmmmmmmmmmm

I guess maybe I should focus on that.
instead of the vague "change things to resolve your problem" frame.

right and also:
rewriting this is not an unusual change.
deleting the logs is not an unusual change.

it's just that people don't do those because they're afraid of changing code,
because of all the issues:
it's not their code, they don't understand it, they don't know if it's right, etc


** also tangentially, yakshaving is good
hmmm

i mean it's related because the idea is:
you can fix the issue that you see.

i mean a correct yakshave is good;
one which is just based on piles of workarounds is not good.

so it goes back to, you can change the code.
** writing it out fast

title: Be willing to change anything to resolve your problem

When searching for a solution to a problem,
the practical approach is to view some things (including the problem itself) as fixed and unchangeable constraints,
and other things as "free variables" that you can set to whatever you want.
But you should make sure to also perform a basic meta-search process
where you consider: what if you did change those things that seem like fixed constraints?

There are lots of things that seem like fixed constraints:

- Whatever is causing the problem
- The requests ("requirements") of the people who want a solution to the problem
- The scope and details of the problem itself
- The features of the tools you have available to solve the problem
- Things which are managed or controlled by other people
- Things you don't know how to change
- Things which you don't have experience in changing
- Things which, if changed, will cause other problems
- Things which would be expensive to change, or take a long time to change
- Fundamental, well-established things which rarely change
- Old things

Sometimes the best solution will involve changing constraints which seem fixed,
and if you don't spend sufficient time thinking about that,
you'll systematically choose suboptimal solutions.
It might be that the best solution still doesn't involve changing any fixed-seeming constraint.
but it's still important to think about it!

Some examples:
- A friend was considering the best way to store leftover food,
  particularly pizza,
  because pizza boxes didn't fit in their small refrigerator.
  They considered putting it in various containers or wrapping it in foil,
  but until prompted,
  they didn't consider getting a bigger refrigerator,
  which turned out to be the best solution due to other reasons.
- An engineer was considering how to deal with some noisy not-useful log messages
  produced by another team's software.
  They considered various schemes to filter out those messages,
  but didn't consider simply deleting the log messages.
  It turned out that the other team was happy to delete the logs:
  they found them noisy and not-useful too.
- improving society? (changing human nature?? removing scarcity? transhumanism?)
  (building central cities vs remote work?)

When you see a problem,
part of your time should be spent on trying to solve that specific problem within the ordinary limited solution space,
and part of your time should be spent searching a broader space
for solutions which require larger changes,
but are overall better - cheaper, faster, easier to implement, easier to use, higher-quality, better long-term.

One shift in perspective is to remember that
you always are acting within that broader space,
and your goal in that broader space is not to solve a specific problem,
but to make a better world.
When you choose to do constrained search,
it's for reasons of practicality,
not because you are yourself constrained in this way.
Any ideas which suggest you are constrained in this way -
that searching the broad space is the responsibility of others,
or that it should only be done when socially appropriate at specific times
- are wrong.

Evaluating proposals in the broad search space can be difficult;
for example,
a proposal to radical rework everything can seem like a good idea when considered on its individual merits,
but radical reworks, when implemented, usually turn out to be bad solutions.
Make sure to incorporate heuristics like this
to improve your ability to evaluate solutions,
as well as other techniques
like consulting experts and writing out costs and benefits.
You can practice by making predictions, aggregating them with others,
and scoring yourself on your predictive accuracy.

Balancing the amount of time spent on constrained search and the amount of time spent on broad search
is an important skill.
This, too, can be improved by various techniques,
as well as explicit practice.
In my experience,
most people spent too little time on broad search.
Therefore, you should err on the side of broad search
until you have a better understanding of the balance.

* attempt 2, focusing on changing code
ok ok ok
** write it out
title: Did you know you can actually change your code?

I can't count how many times
I've heard programmers talking about writing more code to work around an issue in some other code.
You are a programmer - you are allowed to change code!
In fact, it's your job!
Just change the code to do what you want!
Fix the bug! Change the behavior! Add the feature!

- Log message that's noisy and useless?
  Delete the logging code!
- API that doesn't expose what you need?
  Add a new parameter!
- Library that does something horrible that all your software depends on?
  Stop doing the horrible thing and add a shim for compatibility!
- Open source software that's doing bad stuff?
  Patch it locally and send the patch upstream!

There are some basic technical excuses one might give for why you aren't able to change the code.
For example:

- But I'm not allowed to touch code owned by other teams!
- But I don't know how to change it!
- But I don't know where the source code is!
- But I can't build this software!
- But I can't run the tests!
- But I can't deploy a modified version of this software to production!

However, you shouldn't be using any software where any of these are an issue,
and you should quit your job if they provide such poor developer tooling that those are real issues.

There are some social/political excuses one might give for why you aren't able to change the code.
For example:

- But it means we have to talk to the team that owns this code!
  So what?
  They'll probably be happy that you're looking at their code and trying to improve it!
  If they aren't happy, they maybe what you're trying to do is evil anyway,
  and you should be thankful that they're stopping you!
  If what you're doing is good, but they're still not happy,
  then stop using their software!
- But changing things will impact other users!
  If what you are trying to do is good,
  then the impact on other users will be good,
  and you should embrace the costs and benefits of coordinating with them.
  If what you are trying to do is bad,
  then you should not do it.
- But we haven't budgeted time to do it the right way!
  Then you never will budget time to do it the right way.
  Do it the right way now or you will suffer forever.
- But this is supposed to be a quick experiment!
  You can perfectly well do a quick experiment by modifying the original code;
  indeed, it should be quicker to do it that way.

Fear not!
Just change the code!
** this is so boring and corporate though
maybe I should say things about...
upstreaming?
