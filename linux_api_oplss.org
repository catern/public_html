* TODO OPLSS participant talk
** DONE Scheduling OPLSS participant talk
Hi,

I have some work in a very early stage - developing a practically-useful formal
model of the Linux system call API.  I can describe the problem and the context
around it from an OS perspective, but I don't yet have much to say about how to
solve it with PL, and I'd love to hear ideas from others.  Would this be a good
participant talk?

Thanks,
Spencer Baugh

(response was "definitely")
** things they'll say
hey there's that posix io formal model thing.

or there's Ethos
** TODO plan it!!
ok
** abstract
no let's not start with this
** outline
okay so.

i guess we'll basically summarize my blog post?

one thing that's useful to focus on:
"IO-safety", capability-safety, etc.
that is, making sure you can't make system calls on the wrong file descriptor,
which would be just as bad and have much the same effects as writing to the wrong address.

i think that will be interesting.

but, also, emphasize that we have to model the existing system,
we can't just invent a new region system or whatever

also, I should engage with the posix IO model thing.
like... generating IO-safe interfaces from that would be difficult.
and also I feel like it... is missing some relevant information?
but I should dig into this.

also emphasize that this is very distinct from typing the data that flows through the kernel to other processes;
like the bytes that are in files at rest or in pipes.
that's not covered here at all,
that will still be raw unstructured bytes
(but of course that's something to improve too)

(maybe mention ioctls as an amusingly extremely-untyped interface)
** sandboxing?
i wonder if this model could be useful for sandboxing too, like seccomp syscalls...
** maybe
say that I got into this through wanting IO-safety when doing systems programming.

we want these rich powerful features,
in a type-safe language.
** outline
self-intro
brief project intro
background on OS stuff
talk about IO-safety
(this is very distinct from typing the data that flows through the kernel to other processes)

talk about other things that people like to do

talk about a description of the API making it easier to do those things

talk about the requirements:
- various fancy stuff
- architecture divergence
- maintainable by Linux kernel hackers

talk about some prior work (that POSIX fs model)

done.
** talk
*** self-intro
- Spencer Baugh
- Working at Jane Street in 2023
- Interested in:
  - operating systems
  - distributed programming
  - open source
*** project intro
Project:
Add rich static types to the Linux kernel syscall API,
in a useful way for userspace.

Motivation: The API is currently mostly unsafe and untyped.

Talk outline:
1. What "the Linux kernel syscall API" even is
2. How it's unsafe
3. How "add rich static types" helps
4. How to "add rich static types"
5. Related work

This will not take the full time, so please ask questions throughout.

I would love to hear suggestions or ideas.

*** Linux syscall API
Linux: the Linux kernel
- Most programs run on top of a kernel
- Programs interact with the kernel via "system calls" (also "syscall")
- A syscall is basically a function call:
  - Pass some arguments (values, pointers to memory, etc)
  - Receive a return value
  - Some side effects happen

How are syscalls made available to programmers?

Two questions:
- Typing: What is the type of a system call?
  How can it be made type-safe?
- Calling convention: How is a system call performed?
  What's the "protocol" spoken to the kernel?

We'll ignore calling convention,
and assume we have something like this for free:
#+begin_src c
ssize_t read(int fd, void *buf, size_t count);
#+end_src

A very unsafe C function,
which wraps the "read" system call.

Now we'll make this safe.
*** safety

#+begin_src c
ssize_t read(int fd, void *buf, size_t count);
#+end_src

- =int fd= is supposed to be an open file descriptor
- =buf= and =count= are essentially a pointer to a sized writable buffer

#+begin_src c
ssize_t read(int fd, void *buf, size_t count);
#+end_src

Memory-safe languages want to make =buf= and =count= safe.
Thus:
#+begin_src c++
ssize_t read(int fd, Array<uint8_t> buf);
#+end_src

#+begin_src c++
ssize_t read(int fd, Array<uint8_t> buf);
#+end_src

For true safety, we also need =fd= to be valid,
not just an arbitrary integer.

Some justification:
File descriptors are used for many OS resources,
including in the implementation of abstractions.
- Setting a timer
- Waiting for events
- Communicating between threads or processes
- Storing data

#+begin_src c++
ssize_t read(int fd, Array<uint8_t> buf);
#+end_src

- If =fd= is just a raw integer,
  then anything can forge file descriptors and break abstractions
- So the =fd= argument needs to be an abstract data type that guarantees it wasn't forged
- Sometimes called "capability safety" or "I/O safety"

Thus:
#+begin_src c++
ssize_t read(FileDescriptor fd, Array<uint8_t> buf);
#+end_src

#+begin_src c++
ssize_t read(FileDescriptor fd, Array<uint8_t> buf);
#+end_src

- We could go further
- We could make the interaction of the return value and the output buffer more safe
- But we'll stop here, because there's a problem with this wrapper.

The problem with this wrapper:
- We just did this all by hand
- This is always the case
- These safer wrappers are always hand-written,
  from a human looking at the docs, implementation, etc
- This, empirically, does not scale

- Hand-writing safe abstractions works fine for memory
- But: The syscall API is extremely large
- For most of it, there are *no* type-safe wrappers in *any* language
- For example:
  - Namespace manipulation (for containers)
  - Netlink (the networking stack)
  - ioctls ("Generic grab bag", notoriously extremely untyped even for C)

The lack of safe wrappers for syscalls is bad for two reasons:
- Programmers who want correct programs can't use advanced OS features
  (which could make many programs much simpler)
- Programmers who want advanced OS features are not going to get correct programs

*** a spec
So we want:
- Safe wrappers
- For the entire Linux syscall API
- In every language
- Without having to write those by hand

Then we can use these features safely.

Two-step process:
1. Write down rich type information about syscalls,
   at least *once*,
   preferably in a language-independent way
2. Use that to generate idiomatic type-safe interfaces in many languages.

1 is this project.
2 is straightforward IME so we'll ignore it.

Project goal: write down rich type information about syscalls

Extra benefits:
- New languages can do IO without adding a C FFI
- Debugging tools (like strace) can hardcode fewer syscall details
- Linux syscall fuzzers can hardcode fewer syscall details
- Many other Linux-syscall-API-touching projects can hardcode fewer syscall details

*** issues
Project goal: write down rich type information about syscalls

- How, exactly?
- In what language?
- What type information do we need?

Project goal: write down rich type information about syscalls

Some clear things we want:
- Represent that syscalls can open/close/mutate resources passed as arguments or returned
- Represent that many buffers and return values are sized based on other passed arguments
  (Maybe without full dependent types?)
- This must be maintainable by current Linux C programmers.
  For example: Embed the types with macros into the existing C code,
  and scrape them out for use.

Project goal: write down rich type information about syscalls

We also need to handle the calling convention, so we need to support:
- Complex pointer-based datastructures that exist in memory
- Bit-level data formats
- Tagged unions
- Overloaded system calls such as ioctl, where the argument types are dependent on which constant enum value is passed
- Architecture-specific divergences from a mostly-common core
- Doing all this without changing the existing calling convention/protocol at all

Project goal: write down rich type information about syscalls

In summary, for each syscall, we need:
- rich typing information
- detailed description of the calling convention

Project goal: write down rich type information about syscalls

There are many options!
I'm looking for suggestions.

*** related work
There are some formal models of POSIX APIs.

They are hard to use here:
- They don't specify the calling convention,
  so you can't generate useful wrappers with them.
- They cover only a small part of the API and contain lots of information.
  We want something with much less information, but which covers the whole API.

**** papers
https://mgree.github.io/papers/popl2020_smoosh.pdf
https://6826.csail.mit.edu/2017/papers/sibylfs.pdf

this is the one that has the nice fd preconditions and postconditions thing:
https://www.doc.ic.ac.uk/~pmd09/research/publications/2018/ecoop/a-concurrent-specification-of-posix-file-systems.pdf

https://www.doc.ic.ac.uk/~pg/publications/Ntzik2017Reasoning.pdf
*** misc

**** portability
(In many cases this gives up portability, but we want to do that)

**** not checked against implementation
But it's somewhat meaningful to note that this type information wouldn't necessarily be *checked*
against the implementation.
We just want a language to express the invariants,
which maybe is maintained by hand.
* abstract
title: Adding rich typing information to the Linux syscall API

The Linux syscall API is largely untyped and unsafe.
This makes it hard to use Linux operating system functionality in a safe way.
The traditional solution is to laboriously write safe syscall wrappers by hand in one's language of choice,
but most Linux functionality has no such safe wrapper in any language.

Instead, we can work upstream in Linux to create rich type information for the syscall API in a language-independent way,
then generate safe and idiomatic syscall wrappers in each language using that information.

Syscalls have complex behavior,
so the right way to express this type information is not clear.
I will discuss the motivation for this project and the issues that it faces,
and a few options for how to carry it out.
This project is in early stages, and I welcome suggestions.
