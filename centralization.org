* APIs and transaction costs
the cost of maintaining stable APIs in a distributed system leading one to prefer larger units with unstable internal APIs, is analogous to, the transaction costs in a marketplace that lead one to create firms

<quanticle> catern: Or the forces that lead organisms to develop specialized organs.
> quanticle: oh? I haven't heard of that/don't know about that process 

<gwern> catern: but it's not a one-way ratchet, ofcourse. systems don't just get larger monotonically. so you need to take that into account. it's an instance of /Backstop - 'inside' the module, you can use force and learned algorithms and heuristics for design, but that is unreliable; outside, you need evolution which is reliable but high variance
<gwern> catern: so the question is what's the 'fitness' or 'market' which is operating outside the large-API which constrains andselects among them and keeps them honest?
> gwern: ah, nice elaboration of the analogy! yeah, that's interesting...
> the market for APIs...


it's not just distributed systems, it's APIs in general.

maintaining a stable API is a transaction cost.
in coasean terms, you want to form modules with internally unstable APIs for this

title: Stable APIs are transaction costs

Linux is a good example...

<gwern> the problem here is more intra-API than inter-API. given a very specific specification, evolving the API is incremental local stuff. you may even be able to a/b test your way up the hill! but the real problem is deciding modules should exist at all
<gwern> given a spec or domain, parts of an API can be optimized in isolation. but the set of APIs itself cannot be optimized in isolation. there is no view from nowhere
<gwern> the overall set of APIs is interacting with each other, with the community, with the economics and businesses...

> interesting observation; to translate that back into markets, I guess: you can drive down the transaction costs of interactions between two firms buying and selling a certain good, but the real impossible "planning problem" is deciding how the economy should be divided into firms
> I feel like I've never heard a critique of central planning from that perspective, but I haven't really read any

<quanticle> Which is why I find the comparison with the evolution of organs to be so interesting
<quanticle> Initially, all life was single-celled organisms. What kicked off that impetus for specialization?


> (gwern, of course, is immediately throwing out these deep insights on an analogy that only just barely occurred to me)
<quanticle> Well, that's the problem with gwern. He throws out deep insights on an analogy that might turn out to be totally wrong.
<gwern> perhaps, but it certainly hasn't 'just occurred to me'. I've been talking about bilevel optimization as a pattern for many years now
<gwern> and I am in good company, from darwin and coase on
> (to be clear, I was expressing awe, not criticizing)

https://www.gwern.net/Backstop

<gwern> (ie the most important decision anyone ever made about amazon's APIs was bezos deciding that there would *be* APIs)

wow another amazing point

that brought the costs of using them down so that they could be usable externally...

but I guess there would still be APIs anyway...

there's kind of a sliding scale of stability...

I guess Bezos kind of deciding to make the internal environment of Amazon,
like the external environment?
where there's stability and competition...

> (does that mean that the Bezos declaration could really be rephrased as saying: "We shall have internal competition and separate firms like the outside world"?)
<gwern> yes, you can see it as that way. amazon is a shell around a lot of competing teams
<gwern> in order to scale

i mean... it's not clear... that that's the case...

i guess... you could have... a hierarchical structure...
but... you need...
incentives to make things stable...
that's what makes firms in the outside world use stable APIs/drop their transaction costs.

so Bezos was really just artificially inducing people to do that.
and once they did that, wasn't it useful?

> (I guess "We shall have internal competition and separate firms like the outside world" is an inaccurate way to put it actually. it's "We shall have *the effects of having* internal competition and separate firms like the outside world". normally competition gives an incentive to drop inter-firm transaction costs/stabilize your APIs. but that incentive doesn't exist inside Amazon so Bezos made an artificial one...)


> (hm so the followup question here is whether, inside Amazon, if some group makes an insufficiently stable API with too-high transaction costs, another group can make their own API and encourage customers to use that instead and reap the benefits)
<gwern> ('bit creep' towards making the stabler or cheaper API doing more and more, even if unsuited...)



I guess the real article here would be something about how,
it's valuable to have centralization in your distributed system.

centralization is not the opposite of a distributed system

centralization is not the enemy
centralization is not the enemy of a distributed system?

a bash pipeline is centralized! for example...

Centralization is not (always) the enemy

hmmmm

fight centralization with centralization...

like...

the reaction to a totalitarian regime is not complete market regime,
it's allowing a market...

i mean, we already have that... the internet.
my view is that the issue is that this centralization-power is reserved to the big companies

smaller things try to be decentralizd or something...
without supporting a notion where it's centralization.


okay, so, really REALLY the point here is,
Centralization and decentralization come in layers.

like the internet contains centralized nodes.

well it's really just two-level, mostly...

a decentralized system contains centralized nodes and that's fine...
I guess, what we want to do is just,
increase the amount of stuff which can happen in the decentralized world,
by decreasing transaction costs.

and one approach to that could be making an overlay, I guess... um...
(like urbit?)

(what does this map to in economics? corporations/agents making contracts,
to substitute a new lower-transaction-cost set of laws?)

basically:
You don't need to make everything decentralized everywhere.
Centralization *with APIs* is fine...
um, right? I guess?

I mean the issue is having *technical* APIs for moving stuff around,
so you aren't restricted by their, restrictions on access and interaction with Facebook or whatever...

I mean, we already have all the APIs we need...
we just had centralization cuz... it's too hard for normal people to run things using those APIs, I think...
(I mean, maybe there's some Facebook-centralized features which are nice or something,
but, dubious that those can't be done on user's local nodes)

so it's like... user-centralization vs service-centralization.

distributed vs decentralized, maybe? my own idiosyncratic definition?

it's like "concurrent" vs "parallel"!!!!
parallel == distributed
concurrent == decentralized

wait okay yeah so

parallel and distributed are obviously related.
they both mean, "running on multiple nodes".

concurrent and decentralized...

well distributed doesn't mean decentralized:
you can have each node/subsystem talk to each other and come to an agreement (decentralized),
or you can centrally control them (centralized)

and parallel doesn't mean concurrent:
you can have a parallel program which is concurrent (so each thread interacts with each other),
or you can specify a parallel program centrally, non-concurrent 
(saying... run this here and run that there)... (ala rsyscall)


but, one issue:
you can have concurrency without parallelism, too!
can you have a decentralized system without a distributed system?
think about it...

i mean concurrency comes into play only because the world is concurrent;
there's multiple nodes talking to me, UIs, etc...

AHA!

decentralized means: mutually distrustful.

and you could say it's, "multiple authorities"
but ultimately it boils down to:
the other side might hack us and we have no way to prevent that.
they have incentives to hack and no reason not to.

with a single authority you can prevent that with policy and organizations.
(and also prevent them from accidentally breaking you, etc. hack includes "accidentally hack" through laziness)


and so there's a cube, kind of.

concurrenct <-> synchronous
centralized <-> decentralized
parallel    <-> single-threaded

except that last one doesn't matter except in terms of cost

> aha! I figured it out!!
> okay I'm wrong, decentralized and concurrent don't mean the same thing
> decentralized just means: "mutually distrustful". or, "no single authority". 
or, it boils down to, "there's no incentive for them to not hack us or break us,
and plenty of incentive for them *to* hack or break us"
> and, obviously, this is an independent dimension from concurrent
> so you could have concurrent/centralized or synchronous/centralized - those are obvious and well known
> or you could have synchronous/decentralized -
that's when you're calling into sandboxed libraries or being called by sandboxed libraries,
interacting with distrusted objects, etc
> or concurrent/decentralized - the usual interpretation



byzantine... failure...
irrelevant... except when decentralized...


* library-style vs service-style!
i.e. whether your users run a copy of you,
or whether they contact the service.

(kind of like pure/re-entrant functions vs stateful objects?)
(modern functions get their own stack frame, old ones and objects don't...)

* re-evaluating
okay... so...

basically I can say "if you can run your system you don't need a stable API"

which is really what I want to say.
